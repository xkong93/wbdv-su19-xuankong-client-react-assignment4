{"ast":null,"code":"import widgets from '../data/widgets'; // reducer => state => store => provider => container => map to props => components\n\nconst widgetReducer = (state = {\n  widgets: widgets\n}, action) => {\n  if (action.type === 'DELETE_WIDGET') {\n    return {\n      widgets: state.widgets.filter(widget => widget.id != action.widgetId)\n    };\n  } else if (action.type === 'CREATE_WIDGET') {\n    return {\n      widgets: [...state.widgets, {\n        id: new Date().getTime(),\n        name: 'New Widget',\n        type: 'HEADING',\n        size: '1'\n      }]\n    };\n  } else if (action.type === 'UPDATE_WIDGET') {\n    console.log(typeof JSON.parse(action.widget.ordered));\n    return {\n      widgets: state.widgets.map(widget => {\n        if (widget.id === action.widget.id) {\n          widget.size = action.widget.size;\n          widget.text = action.widget.text;\n          widget.href = action.widget.href;\n          widget.src = action.widget.src;\n          console.log(typeof widget.ordered);\n          widget.ordered = 1;\n          return action.widget;\n        }\n\n        return widget;\n      })\n    };\n  }\n\n  return state;\n};\n\nexport default widgetReducer;","map":{"version":3,"sources":["/Users/xuankong/Documents/Onedrive/NEU/CS5610/wbdv-su19-xuankong-client-react-assignment4/src/reducers/widgetReducer.js"],"names":["widgets","widgetReducer","state","action","type","filter","widget","id","widgetId","Date","getTime","name","size","console","log","JSON","parse","ordered","map","text","href","src"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB,C,CAEA;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG;AAACF,EAAAA,OAAO,EAAEA;AAAV,CAAT,EAA6BG,MAA7B,KAAwC;AAC1D,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACjC,WAAO;AACHJ,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcK,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,IAAaJ,MAAM,CAACK,QAAnD;AADN,KAAP;AAGH,GAJD,MAIO,IAAIL,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACxC,WAAO;AACHJ,MAAAA,OAAO,EAAE,CACL,GAAGE,KAAK,CAACF,OADJ,EAEL;AACIO,QAAAA,EAAE,EAAG,IAAIE,IAAJ,EAAD,CAAaC,OAAb,EADR;AAEIC,QAAAA,IAAI,EAAE,YAFV;AAGIP,QAAAA,IAAI,EAAE,SAHV;AAIIQ,QAAAA,IAAI,EAAC;AAJT,OAFK;AADN,KAAP;AAWH,GAZM,MAYA,IAAIT,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACxCS,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOC,IAAI,CAACC,KAAL,CAAWb,MAAM,CAACG,MAAP,CAAcW,OAAzB,CAAnB;AACA,WAAO;AACHjB,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAckB,GAAd,CAAkBZ,MAAM,IAAI;AACjC,YAAIA,MAAM,CAACC,EAAP,KAAcJ,MAAM,CAACG,MAAP,CAAcC,EAAhC,EAAoC;AAChCD,UAAAA,MAAM,CAACM,IAAP,GAAcT,MAAM,CAACG,MAAP,CAAcM,IAA5B;AACAN,UAAAA,MAAM,CAACa,IAAP,GAAchB,MAAM,CAACG,MAAP,CAAca,IAA5B;AACAb,UAAAA,MAAM,CAACc,IAAP,GAAcjB,MAAM,CAACG,MAAP,CAAcc,IAA5B;AACAd,UAAAA,MAAM,CAACe,GAAP,GAAalB,MAAM,CAACG,MAAP,CAAce,GAA3B;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAOR,MAAM,CAACW,OAA1B;AACAX,UAAAA,MAAM,CAACW,OAAP,GAAiB,CAAjB;AACA,iBAAOd,MAAM,CAACG,MAAd;AACH;;AACD,eAAOA,MAAP;AACH,OAXQ;AADN,KAAP;AAcH;;AACD,SAAOJ,KAAP;AACH,CAnCD;;AAqCA,eAAeD,aAAf","sourcesContent":["import widgets from '../data/widgets'\n\n// reducer => state => store => provider => container => map to props => components\n\nconst widgetReducer = (state = {widgets: widgets}, action) => {\n    if (action.type === 'DELETE_WIDGET') {\n        return {\n            widgets: state.widgets.filter(widget => widget.id != action.widgetId)\n        }\n    } else if (action.type === 'CREATE_WIDGET') {\n        return {\n            widgets: [\n                ...state.widgets,\n                {\n                    id: (new Date()).getTime(),\n                    name: 'New Widget',\n                    type: 'HEADING',\n                    size:'1'\n                }\n            ]\n        }\n    } else if (action.type === 'UPDATE_WIDGET') {\n        console.log(typeof JSON.parse(action.widget.ordered));\n        return {\n            widgets: state.widgets.map(widget => {\n                if (widget.id === action.widget.id) {\n                    widget.size = action.widget.size\n                    widget.text = action.widget.text\n                    widget.href = action.widget.href\n                    widget.src = action.widget.src\n                    console.log(typeof widget.ordered)\n                    widget.ordered = 1\n                    return action.widget;\n                }\n                return widget\n            })\n        }\n    }\n    return state;\n}\n\nexport default widgetReducer"]},"metadata":{},"sourceType":"module"}