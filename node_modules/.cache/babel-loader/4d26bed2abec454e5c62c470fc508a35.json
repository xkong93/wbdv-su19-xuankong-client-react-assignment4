{"ast":null,"code":"export default class WidgetService {\n  constructor() {\n    this.url = 'http://localhost:8080/api/widgets';\n\n    this.createWidget = widget => {\n      // widgets.push(widget)\n      return fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify(widget),\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json());\n    };\n\n    this.findAllWidgets = () => {\n      return fetch(this.url).then(response => response.json()); // return widgets\n    };\n\n    this.findWidgetById = widgetId => {\n      return fetch(this.url + '/' + widgetId).then(response => response.json()); // return widgets.find(widget => widget.id == widgetId)\n    };\n\n    this.updateWidget = (widgetId, newWidget) => {\n      return fetch(this.url + '/' + widgetId, {\n        method: \"PUT\",\n        body: JSON.stringify(newWidget),\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json()); // widgets = widgets.map(widget => widget.id == widgetId ? newWidget : widget)\n    };\n\n    this.deleteWidget = widgetId => {\n      //no need to return\n      fetch(this.url + '/' + widgetId, {\n        method: \"DELETE\"\n      }); // widgets = widgets.filter(widget => widget.id != widgetId);\n    };\n  }\n\n  static getInstance() {\n    if (WidgetService.myInstance == null) {\n      WidgetService.myInstance = new WidgetService();\n    }\n\n    return this.myInstance;\n  }\n\n}\nWidgetService.myInstance = null;","map":{"version":3,"sources":["/Users/xuankong/Documents/Onedrive/NEU/CS5610/wbdv-su19-xuankong-client-react-assignment4/src/services/WidgetService.js"],"names":["WidgetService","url","createWidget","widget","fetch","method","body","JSON","stringify","headers","then","response","json","findAllWidgets","findWidgetById","widgetId","updateWidget","newWidget","deleteWidget","getInstance","myInstance"],"mappings":"AACA,eAAe,MAAMA,aAAN,CAAoB;AAAA;AAAA,SAG/BC,GAH+B,GAGzB,mCAHyB;;AAAA,SAY/BC,YAZ+B,GAYhBC,MAAM,IAAI;AACrB;AACA,aAAOC,KAAK,CAAC,KAAKH,GAAN,EAAW;AACnBI,QAAAA,MAAM,EAAE,MADW;AAEnBC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAFa;AAGnBM,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAHU,OAAX,CAAL,CAMJC,IANI,CAMEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANf,CAAP;AAOH,KArB8B;;AAAA,SAuB/BC,cAvB+B,GAuBd,MAAM;AACnB,aAAOT,KAAK,CAAC,KAAKH,GAAN,CAAL,CAAgBS,IAAhB,CAAsBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAAnC,CAAP,CADmB,CAEnB;AACH,KA1B8B;;AAAA,SA6B/BE,cA7B+B,GA6BbC,QAAD,IAAc;AAE3B,aAAOX,KAAK,CAAC,KAAKH,GAAL,GAAW,GAAX,GAAiBc,QAAlB,CAAL,CACFL,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,CAAP,CAF2B,CAI3B;AACH,KAlC8B;;AAAA,SAoC/BI,YApC+B,GAoChB,CAACD,QAAD,EAAWE,SAAX,KAAyB;AACpC,aAAOb,KAAK,CAAC,KAAKH,GAAL,GAAW,GAAX,GAAiBc,QAAlB,EAA4B;AACpCV,QAAAA,MAAM,EAAE,KAD4B;AAEpCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,SAAf,CAF8B;AAGpCR,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAH2B,OAA5B,CAAL,CAMJC,IANI,CAMCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANb,CAAP,CADoC,CAQpC;AACH,KA7C8B;;AAAA,SA+C/BM,YA/C+B,GA+CfH,QAAD,IAAc;AACzB;AACAX,MAAAA,KAAK,CAAC,KAAKH,GAAL,GAAW,GAAX,GAAiBc,QAAlB,EAA2B;AAC5BV,QAAAA,MAAM,EAAC;AADqB,OAA3B,CAAL,CAFyB,CAKzB;AACH,KArD8B;AAAA;;AAK/B,SAAOc,WAAP,GAAqB;AACjB,QAAInB,aAAa,CAACoB,UAAd,IAA4B,IAAhC,EAAsC;AAClCpB,MAAAA,aAAa,CAACoB,UAAd,GAA2B,IAAIpB,aAAJ,EAA3B;AACH;;AACD,WAAO,KAAKoB,UAAZ;AACH;;AAV8B;AAAdpB,a,CACVoB,U,GAAa,I","sourcesContent":["\nexport default class WidgetService {\n    static myInstance = null;\n\n    url = 'http://localhost:8080/api/widgets';\n\n    static getInstance() {\n        if (WidgetService.myInstance == null) {\n            WidgetService.myInstance = new WidgetService()\n        }\n        return this.myInstance\n    }\n\n    createWidget = widget => {\n        // widgets.push(widget)\n        return fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify(widget),\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then((response) => response.json())\n    }\n\n    findAllWidgets = () => {\n        return fetch(this.url).then((response) => response.json());\n        // return widgets\n    }\n\n\n    findWidgetById = (widgetId) => {\n\n        return fetch(this.url + '/' + widgetId)\n            .then(response => response.json());\n        // return widgets.find(widget => widget.id == widgetId)\n    }\n\n    updateWidget = (widgetId, newWidget) => {\n        return fetch(this.url + '/' + widgetId, {\n            method: \"PUT\",\n            body: JSON.stringify(newWidget),\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json());\n        // widgets = widgets.map(widget => widget.id == widgetId ? newWidget : widget)\n    }\n\n    deleteWidget = (widgetId) => {\n        //no need to return\n        fetch(this.url + '/' + widgetId,{\n            method:\"DELETE\"\n        })\n        // widgets = widgets.filter(widget => widget.id != widgetId);\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}