{"ast":null,"code":"import WidgetListComponent from \"../components/WidgetListComponent\";\nimport { connect } from \"react-redux\";\nimport WidgetService from \"../services/WidgetService\";\nconst service = WidgetService.getInstance();\n\nconst stateToPropMapper = state => {\n  return {\n    widgets: state.widgets,\n    preview: state.preview\n  };\n};\n\nconst propsToDispatcher = dispatch => ({\n  loadWidgets: () => {\n    service.findAllWidgets().then(widgets => dispatch({\n      type: \"FIND_ALL_WIDGETS\",\n      widgets: widgets\n    }));\n  },\n  updateWidget: widget => {\n    service.updateWidget(widget.id, widget).then(service.findAllWidgets().then(widgets => dispatch({\n      type: \"UPDATE_WIDGET\",\n      widgets: widgets\n    })));\n  },\n  deleteWidget: widget => service.deleteWidget(widget.id).then(() => WidgetService.getInstance().findAllWidgets().then(widgets => dispatch({\n    type: \"DELETE_WIDGET\",\n    widgets: widgets\n  }))),\n  createWidget: () => {\n    let newWidget = {\n      id: new Date().getTime(),\n      type: 'HEADING',\n      name: 'New Widget',\n      size: '1',\n      text: \"heading demo\",\n      src: \"\",\n      order: \"1\"\n    };\n    service.createWidget(newWidget).then(service.findAllWidgets().then(widgets => dispatch({\n      type: \"CREATE_WIDGET\",\n      widgets: widgets\n    })));\n  },\n  moveWidgetUp: widget => {\n    dispatch({\n      type: \"Move_Up\",\n      widget: widget\n    });\n  },\n  moveWidgetDown: widget => {\n    dispatch({\n      type: \"Move_Down\",\n      widget: widget\n    });\n  },\n  findWidget: wid => {\n    dispatch({\n      type: \"FIND_WIDGET\",\n      widgetId: wid\n    });\n  },\n  findAllWidgets: () => {\n    dispatch({\n      type: \"FIND_ALL_WIDGET\"\n    });\n  },\n  previewMode: () => {\n    dispatch({\n      type: \"PREVIEW\"\n    });\n  }\n});\n\nconst WidgetListContainer = connect(stateToPropMapper, propsToDispatcher)(WidgetListComponent);\nexport default WidgetListContainer;","map":{"version":3,"sources":["/Users/xuankong/Documents/Onedrive/NEU/CS5610/wbdv-su19-xuankong-client-react-assignment4/src/containers/WidgetListContainer.js"],"names":["WidgetListComponent","connect","WidgetService","service","getInstance","stateToPropMapper","state","widgets","preview","propsToDispatcher","dispatch","loadWidgets","findAllWidgets","then","type","updateWidget","widget","id","deleteWidget","createWidget","newWidget","Date","getTime","name","size","text","src","order","moveWidgetUp","moveWidgetDown","findWidget","wid","widgetId","previewMode","WidgetListContainer"],"mappings":"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","sourcesContent":["import WidgetListComponent from \"../components/WidgetListComponent\";\nimport {connect} from \"react-redux\";\nimport WidgetService from \"../services/WidgetService\"\n\nconst service = WidgetService.getInstance();\n\nconst stateToPropMapper = state => {\n    return {\n        widgets: state.widgets,\n        preview: state.preview\n    };\n};\n\nconst propsToDispatcher = dispatch => (\n    {\n        loadWidgets: () => {\n            service\n                .findAllWidgets()\n                .then(widgets => dispatch({\n                    type: \"FIND_ALL_WIDGETS\",\n                    widgets: widgets\n                }));\n        },\n        updateWidget: (widget) => {\n\n            service\n                .updateWidget(widget.id, widget)\n                .then(service\n                    .findAllWidgets()\n                    .then(widgets => dispatch({\n                        type: \"UPDATE_WIDGET\",\n                        widgets: widgets\n                    })))\n\n\n        },\n        deleteWidget: (widget) =>\n            service\n                .deleteWidget(widget.id)\n                .then(() => WidgetService.getInstance()\n                    .findAllWidgets()\n                    .then((widgets) => dispatch({\n                        type: \"DELETE_WIDGET\",\n                        widgets: widgets\n                    }))),\n        createWidget: () => {\n            let newWidget =\n                {\n                    id: (new Date()).getTime(),\n                    type: 'HEADING',\n                    name: 'New Widget',\n                    size: '1',\n                    text: \"heading demo\",\n                    src: \"\",\n                    order: \"1\"\n                }\n\n            service\n                .createWidget(newWidget)\n                .then(service\n                    .findAllWidgets()\n                    .then(widgets => dispatch({\n                        type: \"CREATE_WIDGET\",\n                        widgets: widgets\n                    })));\n\n        },\n\n        moveWidgetUp: (widget) => {\n            dispatch({\n                type: \"Move_Up\",\n                widget: widget\n            })\n        },\n        moveWidgetDown: (widget) => {\n            dispatch({\n                type: \"Move_Down\",\n                widget: widget\n            })\n        },\n        findWidget: (wid) => {\n            dispatch({\n                type: \"FIND_WIDGET\",\n                widgetId: wid\n            })\n        },\n        findAllWidgets: () => {\n            dispatch({\n                type: \"FIND_ALL_WIDGET\",\n            })\n        },\n        previewMode: () => {\n            dispatch({\n                type: \"PREVIEW\",\n            })\n        }\n\n    });\n\nconst WidgetListContainer = connect(\n    stateToPropMapper,\n    propsToDispatcher\n)(WidgetListComponent);\n\nexport default WidgetListContainer;\n"]},"metadata":{},"sourceType":"module"}