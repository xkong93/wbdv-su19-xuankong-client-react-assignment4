{"ast":null,"code":"import widgets from '../data/widgets'; // reducer => state => store => provider => container => map to props => components\n\nconst widgetReducer = (state = {\n  widgets: widgets\n}, action) => {\n  if (action.type === 'DELETE_WIDGET') {\n    return {\n      widgets: state.widgets.filter(widget => widget.id != action.widgetId)\n    };\n  } else if (action.type === 'CREATE_WIDGET') {\n    return {\n      widgets: [...state.widgets, {\n        id: new Date().getTime(),\n        name: 'New Widget',\n        type: 'HEADING'\n      }]\n    };\n  } else if (action.type === 'ss') {\n    return {\n      widgets: state.widgets.map(widget => widget.id == action.widget.id ? action.widget : widget)\n    };\n  }\n\n  return state;\n};\n\nexport default widgetReducer;","map":{"version":3,"sources":["/Users/xuankong/Documents/Onedrive/NEU/CS5610/wbdv-su19-xuankong-client-react-assignment4/src/reducers/widgetReducer.js"],"names":["widgets","widgetReducer","state","action","type","filter","widget","id","widgetId","Date","getTime","name","map"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB,C,CAEA;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAC;AAACF,EAAAA,OAAO,EAAEA;AAAV,CAAP,EAA2BG,MAA3B,KAAsC;AACxD,MAAGA,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAoC;AAChC,WAAO;AACHJ,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcK,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,IAAaJ,MAAM,CAACK,QAAnD;AADN,KAAP;AAGH,GAJD,MAIO,IAAGL,MAAM,CAACC,IAAP,KAAgB,eAAnB,EAAoC;AACvC,WAAO;AACHJ,MAAAA,OAAO,EAAE,CACL,GAAGE,KAAK,CAACF,OADJ,EAEL;AACIO,QAAAA,EAAE,EAAG,IAAIE,IAAJ,EAAD,CAAaC,OAAb,EADR;AAEIC,QAAAA,IAAI,EAAE,YAFV;AAGIP,QAAAA,IAAI,EAAE;AAHV,OAFK;AADN,KAAP;AAUH,GAXM,MAWA,IAAGD,MAAM,CAACC,IAAP,KAAgB,IAAnB,EAAyB;AAC5B,WAAO;AACHJ,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcY,GAAd,CAAkBN,MAAM,IAAIA,MAAM,CAACC,EAAP,IAAaJ,MAAM,CAACG,MAAP,CAAcC,EAA3B,GAAgCJ,MAAM,CAACG,MAAvC,GAAgDA,MAA5E;AADN,KAAP;AAGH;;AACD,SAAOJ,KAAP;AACH,CAtBD;;AAwBA,eAAeD,aAAf","sourcesContent":["import widgets from '../data/widgets'\n\n// reducer => state => store => provider => container => map to props => components\n\nconst widgetReducer = (state={widgets: widgets}, action) => {\n    if(action.type === 'DELETE_WIDGET') {\n        return {\n            widgets: state.widgets.filter(widget => widget.id != action.widgetId)\n        }\n    } else if(action.type === 'CREATE_WIDGET') {\n        return {\n            widgets: [\n                ...state.widgets,\n                {\n                    id: (new Date()).getTime(),\n                    name: 'New Widget',\n                    type: 'HEADING'\n                }\n            ]\n        }\n    } else if(action.type === 'ss') {\n        return {\n            widgets: state.widgets.map(widget => widget.id == action.widget.id ? action.widget : widget)\n        }\n    }\n    return state;\n}\n\nexport default widgetReducer"]},"metadata":{},"sourceType":"module"}